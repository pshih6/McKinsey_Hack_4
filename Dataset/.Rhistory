print("hello world")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("ggplot2")
source('~/.active-rstudio-document', echo=TRUE)
library('ggfortify') # visualisation
library('ggfortify') # visualisation
library('ggraph') # visualisation
library('igraph') # visualisation
library('dplyr') # data manipulation
library('readr') # data input
source('~/.active-rstudio-document', echo=TRUE)
library(caretEnsemble)
install.packages("caret")
library(caretEnsemble)
sys.status()
sys.call()
sys.frame()
sys.nframe()
system()
Sys.info()
R
r
R.version
library(caretEnsemble)
models.class
caretList()
library(h2o)
citation()
Sys.info()
sys.status()
library(parallel)
detectCores()
options(keep.source = TRUE, width = 60)
library("MouseDivGeno")
source("http://bioconductor.org/biocLite.R")
install.packages("~/2017-2018/UWO/Term 1/Bio 4970F/Microarray classification/MouseDivGeno_1.0.4.tar.gz", repos = NULL, type = "source")
install.packages("~/2017-2018/UWO/Term 1/Bio 4970F/Microarray classification/MouseDivGeno_1.0.0.zip", repos = NULL, type = "win.binary")
library(affy)
source("http://bioconductor.org/biocLite.R")
library(aroma.affymetrix)
libary(MouseDivGeno)
library(MouseDivGeno)
library(Matrix)
library(data.table)
library(dplyr)
library(tidytext)
library(ggplot2)
library(data.table)
library(tidyr)
library(scales)
library(gsubfn)
library(xgboost)
library(caret)
library(stringr)
install.packages("robustbase")
library(caret)
library(stringr)
library(tm)
library(syuzhet)
library(zoo)
install.packages("zoo")
install.packages("Matrix")
install.packages("data.table")
install.packages("dplyr")
install.packages("tidytext")
install.packages("ggplot2")
install.packages("data.table")
install.packages("tidyr")
install.packages("scales")
install.packages("gsubfn")
install.packages("xgboost")
install.packages("caret")
install.packages("stringr")
install.packages("tm")
install.packages("syuzhet")
install.packages("zoo")
install.packages("magrittr")
install.packages("robustbase")
install.packages("Matrix")
install.packages("Matrix")
install.packages("Matrix")
library(adehabitatLT)
library(lubridate)
library(dplyr)
install.packages("lubridate")
install.packages("adehabitatLT")
install.packages("lubridate")
library(adehabitatLT)
library(lubridate)
library(dplyr)
install.packages("lubridate")
install.packages("adehabitatLT")
library(adehabitatLT)
library(lubridate)
library(dplyr)
data("ibex")
x
x <- data("ibex")
x
data("ibex")
ibex
ibex[A153]
class(ibex)
ibex
ibex$A153
x <- ibex$A153
x <- as.data.frame(x)
library(adehabitatLT)
library(lubridate)
library(dplyr)
data("ibex")
x <- ibex$A153
x <- ld(ibex)
View(x)
x <- ibex$id
ibex$id
ibex
burst(ibex)
burst(ibex, "A153")
burst(ibex, A153)
burst(ibex)
burst(ibex)[1]
x <- burst(ibex)[1]
bu <- which.ltraj(ibex, "A153")
bu <- which.ltraj(ibex, "id == A153")
bu <- which.ltraj(ibex, "id == A153")
data("ibex")
bu <- which.ltraj(ibex, "id == A153")
bu <- which.ltraj(ibex, "id == 152")
View(bu)
data("ibex")
ibex[[1]]
x <- ibex[[1]]
View(x)
ibex
ibex[1]
y <- ld(ibex)
View(y)
y <- y %>%
filter(id == "A153")
View(x)
A153 <- ibex[[1]]
A153 <- as.data.frame(A153)
View(A153)
summarize(A153)
summary(A153)
str(A153)
z <- A153 %>%
mutate(speed = (dist/1000)/(dt/3600))
View(z)
summarize(z)
summary(z)
z <- A153 %>%
mutate(speed = (dist/1000)/(dt/3600)) %>%
summarize(speed = mean(speed))
z <- A153 %>%
mutate(speed = (dist/1000)/(dt/3600)) %>%
summarize(mean(speed, na.rm = TRUE))
z <- A153 %>%
mutate(speed = (dist/1000)/(dt/3600)) %>%
summarize()
z <- A153 %>%
mutate(speed = (dist/1000)/(dt/3600)) %>%
summarize(speed)
z <- A153 %>%
mutate(speed = (dist/1000)/(dt/3600)) %>%
summarize(n = n(), mspeed = mean(speed, na.rm = TRUE))
View(z)
A153 <- A153 %>%
mutate(speed = (dist/1000)/(dt/3600)) %>%
A153 %>%
summarize(n = n(), mspeed = mean(speed, na.rm = TRUE))
A153 <- A153 %>%
mutate(speed = (dist/1000)/(dt/3600)) %>%
A153 %>%
summarize(n = n(), mspeed = mean(speed, na.rm = TRUE))
A153 <- ibex[[1]]
A153 <- A153 %>%
mutate(speed = (dist/1000)/(dt/3600)) %>%
A153 %>%
summarize(n = n(), mspeed = mean(speed, na.rm = TRUE))
A153
A153 <- A153 %>%
mutate(speed = (dist/1000)/(dt/3600)) %>%
A153 %>%
summarize(n = n(), mspeed = mean(speed, na.rm = TRUE))
A153 <- A153 %>%
mutate(speed = (dist/1000)/(dt/3600)) %>%
A153 %>%
summarize(n = n(), mspeed = mean(speed, na.rm = TRUE))
A153 <- A153 %>%
mutate(speed = (dist/1000)/(dt/3600)) %>%
A153 %>%
summarize(n = n(), mspeed = mean(speed, na.rm = TRUE))
z <- A153 %>%
mutate(speed = (dist/1000)/(dt/3600)) %>%
A153 %>%
summarize(n = n(), mspeed = mean(speed, na.rm = TRUE))
A153 <- A153 %>%
mutate(speed = (dist/1000)/(dt/3600))
A153 %>%
summarize(n = n(), mspeed = mean(speed, na.rm = TRUE))
str(A153)
A153 <- A153 %>%
mutate(speed = (dist/1000)/(dt/86400))
A153 %>%
summarize(n = n(), mspeed = mean(speed, na.rm = TRUE))
View(A153)
A153 %>%
summarize(n = n(), mspeed = mean(speed))
A153 %>%
summarize(n = n(), mspeed = mean(speed, na,rm = FALSE))
A153 %>%
summarize(n = n(), mspeed = mean(speed, na.rm = FALSE))
A153 %>%
summarize(n = n(), mspeed = mean(speed, na.rm = TRUE))
str(A153)
A153 %>%
summarize(n = n(), mspeed = mean(speed, na.rm = TRUE))
circ.summary(A153$rel.angle)
circ.summary(A153$rel.angle, na.rm = TRUE)
circ.summary(na.omit(A153$rel.angle))
circ.plot(na.omit(A153$rel.angle))
str(A153)
A153 %>%
summarize(n = n(), rel.angle >= 135 & rel.angle <= 225, na.rm = TRUE)
A153 %>%
filter(rel.angle >= 135 & rel.angle <= 225)
A153 %>%
filter(rel.angle >= 135 | rel.angle <= 225)
x <- A153 %>%
filter(rel.angle >= 135 | rel.angle <= 225)
View(x)
circ.summary(na.omit(A153$rel.angle))
A153 <- A153 %>%
mutate(speed = (dist/1000)/(dt/86400))
A153 %>%
summarize(n = n(), mspeed = mean(speed, na.rm = TRUE))
x <- A153 %>%
filter(rel.angle >= 2.35619 & rel.angle <= 3.92699)
z <- A153 %>%
filter(rel.angle >= -2.35619 & rel.angle <= -3.92699)
z <- A153 %>%
filter(rel.angle >= -2.35619 & rel.angle <= -3.92699)
A153 <- ibex[1]
A153 <- ibex[1]
A153 <- as.data.frame(A153)
A153 <- as.data.frame(A153)
A153 <- ibex[[1]]
A153 <- as.data.frame(A153)
A153 <- ibex[[1]]
class(A153)
z <- A153 %>%
filter(rel.angle >= 2.35619 | rel.angle <= 3.92699)
x <- A153 %>%
filter(rel.angle >= 2.35619 & rel.angle <= 3.92699)
z <- A153 %>%
filter(rel.angle <= -2.35619 | rel.angle >= -3.92699)
z <- A153 %>%
filter(rel.angle <= -2.35619 & rel.angle >= -3.92699)
View(z)
z == x
match(z,x)
match(x),x)
match(x,x)
match(x,z)
library(adehabitatLT)
library(lubridate)
library(dplyr)
library()
data("ibex")
x <- burst(ibex)[1]
A153 <- ibex[[1]]
x <- A153 %>%
filter(rel.angle >= 2.35619 & rel.angle <= 3.92699)
x %>%
select("date")
View(x)
x %>%
select(567)
x %>%
select("567")
library(circular)
install.packages("cicular")
library(cicular)
library(cucular)
library(cicular)
cicular
install.packages("cicular")
install.packages("circular")
library(circular)
circ.summary(na.omit(A153$rel.angle))
circ.plot(na.omit(A153$rel.angle))
b <- xtabs(n~x+y,data = x)
b <- xtabs(x~date+y,data = x)
b
library(dplyr)
library(tidytext)
library(ggplot2)
library(data.table)
library(tidyr)
library(xgboost)
library(caret)
library(e1071)
setwd("C:/Users/oo-he/Documents/GitHub/McKinsey_Hack_4/Dataset")
train <- read.csv("train_hack_4.csv")
test <- read.csv("test_hack_4.csv")
ggplot(data = train, aes(x = as.factor(renewal))) + geom_bar()
test$renewal <- -1
combined_data <- rbind(test, train)
channel <- levels(combined_data$sourcing_channel)
channel_filler <- c(1:length(channel))
channel_data <- data.frame(as.list(channel_filler))
colnames(channel_data) <- channel
combined_data_V2 <- cbind(combined_data, channel_data)
for(i in 14:length(combined_data_V2)) {
combined_data_V2[,i] <- 0
}
coordinate <- list()
for (i in 1:length(combined_data_V2$sourcing_channel)) {
channel_value <- as.character(combined_data_V2$sourcing_channel[i])
ifelse(combined_data_V2$sourcing_channel[i] == channel, ifelse(sum(channel_value == colnames(combined_data_V2)) == 1,
combined_data_V2[i,channel_value] <- 1, coordinate <- c(channel_value,coordinate)),
print("this is working"))
}
resident <- levels(combined_data_V2$residence_area_type)
resident_filler <- c(1:length(resident))
resident_data <- data.frame(as.list(resident_filler))
colnames(resident_data) <- resident
combined_data_V3 <- cbind(combined_data_V2, resident_data)
for(i in 19:length(combined_data_V3)) {
combined_data_V3[,i] <- 0
}
for (i in 1:length(combined_data_V3$residence_area_type)) {
resident_value <- as.character(combined_data_V3$residence_area_type[i])
ifelse(combined_data_V3$residence_area_type[i] == resident, ifelse(sum(resident_value == colnames(combined_data_V3)) == 1,
combined_data_V3[i,resident_value] <- 1, coordinate <- c(resident_value, coordinate)),
print("this is still working"))
}
remove <- c("residence_area_type","sourcing_channel")
combined_data_V4 <- combined_data_V3[, !(names(combined_data_V3) %in% remove)]
combined_data_V4$is_na_underwriting <- 0
for(i in 1:length(combined_data_V4$application_underwriting_score)) {
ifelse(is.na(combined_data_V4$application_underwriting_score[i]), combined_data_V4$is_na_underwriting[i] <- 1, print("0"))
}
set.seed(2018)
remove <- setdiff(colnames(combined_data_V4), c("id","renewal"))
train_V2 <- combined_data_V4[combined_data_V4$renewal != -1,]
test_V2 <- combined_data_V4[combined_data_V4$renewal == -1,]
predictor <- setdiff(colnames(combined_data_V4), c("id","renewal"))
model <- svm(renewal ~ predictor, data = train_V2, probability = TRUE)
model <- svm(renewal ~ as.character(predictor), data = train_V2, probability = TRUE)
predictor
model <- svm(train_V2$renewal~ train_V2$Urban, probability = TRUE)
